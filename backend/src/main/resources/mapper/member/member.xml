<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.me.backend.member.mapper.MemberMapper">

    <select id="checkId" parameterType="hashMap" resultType="_int">
        select
        count(*)
        <choose>
            <when test="target == 0">
                from foryou.customer
                where cust_id = #{id}
            </when>
            <otherwise>
                from foryou.seller
                where seller_id = #{id}
            </otherwise>
        </choose>

    </select>

    <select id="member" resultType="MemberDTO">
        <choose>
            <when test='cust_id neq ""'>
                select
                cust_id,
                cust_pwd,
                cust_name,
                cust_email,
                cust_tel,
                mileage,
                status
                from foryou.customer
                where cust_id = #{cust_id} and cust_pwd = #{cust_pwd} and status = 'N'
            </when>
            <otherwise>
                select
                seller_id,
                seller_pwd,
                seller_name,
                seller_tel,
                from foryou.seller
                where cust_id = #{seller_id} and cust_pwd = #{seller_pwd} and status = 'N'
            </otherwise>
        </choose>
    </select>

    <select id="loginMember" parameterType="hashMap" resultType="MemberDTO">
        <choose>
            <when test="target == 'user'">
                select
                cust_id,
                cust_pwd,
                cust_name,
                cust_email,
                cust_tel,
                mileage,
                status
                from foryou.customer
                where cust_id = #{id}
            </when>
            <otherwise>
                select
                seller_id,
                seller_pwd,
                seller_number,
                company_name,
                seller_tel,
                seller_name
                from foryou.seller
                where seller_id = #{id}
            </otherwise>
        </choose>
    </select>

    <select id="couponList" resultType="CouponDTO">
        select coupon_id, coupon_list_id, coupon_name, coupon_price
        from foryou.coupon
        join foryou.coupon_list using (coupon_id)
        where cust_id = #{id}
    </select>

    <insert id="signUp">
        <choose>
            <when test='cust_id neq ""'>
                insert
                    into
                foryou.customer
                (
                    cust_id,
                    cust_pwd,
                    cust_name,
                    cust_email,
                    cust_tel,
                    mileage,
                    banned,
                    status,
                    enroll_date,
                    delete_date,
                    token
                )
                values
                (
                    #{cust_id},
                    #{cust_pwd},
                    #{cust_name},
                    #{cust_email},
                    #{cust_tel},
                    default,
                    default,
                    default,
                    default,
                    default,
                    default
                )
            </when>
            <otherwise>
                insert
                into
                foryou.seller
                (
                seller_id,
                seller_pwd,
                seller_number,
                seller_name,
                company_name,
                seller_tel,
                status,
                enroll_date
                )
                values
                (
                #{seller_id},
                #{seller_pwd},
                #{seller_number},
                #{seller_name},
                #{company_name},
                #{seller_tel},
                default,
                default
                )
            </otherwise>
        </choose>
    </insert>

    <insert id="like" parameterType="hashMap">
        insert into
            foryou.like
            (
                cust_id,
                product_id
            )
            values
            (
                #{cust_id},
                #{product_id}
            )
    </insert>

    <delete id="deleteLike" parameterType="hashMap">
        delete
        from foryou.like
        where like_id = #{like_id}
    </delete>

    <select id="findLike" parameterType="_int" resultType="_int">
        select like_id
        from foryou.`like`
        where like_id = #{id}
        union all
        select 0
        from dual
        where not exists(
                select like_id
                from foryou.`like`
                where like_id = #{id}
        )
    </select>

    <select id="findInputLike" resultType="_int">
        select max(like_id) as 'like_id'
        from foryou.`like`
    </select>

    <select id="likeList" parameterType="String" resultType="ProductDTO">
        select l.product_id,  product_name, img1, price, uploadFile, like_id
        from foryou.`like` l
                 left join foryou.product p on p.product_id = l.product_id
                 join foryou.option o on p.product_id = o.product_id
        where cust_id = #{id} and main = 'Y'
    </select>

    <delete id="deleteLikeList" parameterType="java.util.List">
        delete from foryou.like
        <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
                (like_id = #{item.like_id} AND cust_id = #{item.seller_id})
            </foreach>
        </where>
    </delete>

    <select id="findCartList" parameterType="String" resultType="cartDTO">
        select
                cart_id,
                cust_id,
                o.product_id,
                o.option_id,
                company_name,
                product_name,
                option_name1,
                option_content1,
                option_name2,
                option_content2,
                option_price,
                discount,
                c.count,
                maxCount,
                price,
                img1 as 'img',
                uploadFile
        from foryou.cart c
                 join foryou.option o on (c.option_id = o.option_id)
                 join foryou.product p on (o.product_id = p. product_id)
                 join foryou.seller s on (p.seller_id = s.seller_id)
        where cust_id = #{id}
    </select>

    <select id="findCart" parameterType="cartDTO">
        select option_id
        from foryou.cart
        where cust_id = #{cust_id} and option_id = #{option_id}
        union
        select 0
        from dual
        where not exists(
                select option_id
                from foryou.cart
                where cust_id = #{cust_id} and option_id = #{option_id})
    </select>

    <insert id="inputCart" parameterType="cartDTO">
        insert
            into foryou.cart
            (
                cust_id,
                option_id,
                count
            )
            value
                (
                    #{cust_id},
                    #{option_id},
                    #{count}
                )
    </insert>

    <update id="modifyCartCount" parameterType="cartDTO">
        update foryou.cart
            set count = count + #{count}
        where cust_id = #{cust_id} and option_id = #{option_id}
    </update>

    <update id="modifyCart" parameterType="hashMap">
        update foryou.cart
            <choose>
                <when test="target.equals('decrease')">
                    set count = count - 1
                </when>
                <when test="target.equals('increase')">
                    set count = count + 1
                </when>
                <when test="target.equals('custom')">
                    set count = #{count}
                </when>
                <otherwise>
                    set count = 1
                </otherwise>
            </choose>
        where cart_id = #{cart_id}
    </update>

    <select id="findCartCount" parameterType="hashMap" resultType="cartDTO">
        select count
        from foryou.cart
        where cart_id = #{cart_id}
    </select>

    <delete id="deleteCart" parameterType="java.util.List">
        delete from foryou.cart
        <where>
            <foreach collection="list" item="item" open="" close="" separator="OR">
                (cart_id = #{item.cart_id})
            </foreach>
        </where>
    </delete>


    <select id="findAddressList" parameterType="String" resultType="AddressDTO">
        select address_id, cust_id, addr_name, name, post, addr, addr_detail, addr_default, phone
            from foryou.address
        where cust_id = #{id}
        order by addr_default desc
    </select>

    <insert id="inputAddress" parameterType="AddressDTO">
        insert
            into foryou.address
        (
            cust_id,
            addr_name,
            name,
            post,
            addr,
            addr_detail,
            addr_default,
            phone
        )
        values
        (
            #{cust_id},
            #{addr_name},
            #{name},
            #{post},
            #{addr},
            #{addr_detail},
            #{addr_default},
            #{phone}
        )
    </insert>

    <update id="modifyAddressMain" parameterType="AddressDTO">
        update foryou.address
            set addr_default = 'N'
        where cust_id = #{id}
    </update>

    <update id="modifyAddress" parameterType="AddressDTO">
        <choose>
            <when test='addr_default == "Y"'>
                update foryou.address
                    set addr_name = #{addr_name},
                        name = #{name},
                        post = #{post},
                        addr = #{addr},
                        addr_detail = #{addr_detail},
                        phone = #{phone},
                        addr_default = 'Y'
                where address_id = #{address_id}
            </when>
            <otherwise>
                update foryou.address
                set addr_name = #{addr_name},
                    name = #{name},
                    post = #{post},
                    addr = #{addr},
                    addr_detail = #{addr_detail},
                    phone = #{phone}
                where address_id = #{address_id}
            </otherwise>
        </choose>
    </update>

    <delete id="deleteAddress" parameterType="AddressDTO">
        delete
        from foryou.address
        where address_id = #{address_id}
    </delete>

    <insert id="inputOrder" parameterType="OrderDTO">
        insert into foryou.order
        (
            cust_id,
            order_name,
            phone,
            email,
            recipient,
            recipient_phone,
            post,
            addr,
            addr_detail,
            price
        )
        values
        (
            #{cust_id},
            #{order_name},
            #{phone},
            #{email},
            #{recipient},
            #{recipient_phone},
            #{post},
            #{addr},
            #{addr_detail},
            #{price}
        );
    </insert>

    <insert id="inputOrderDetail" parameterType="java.util.List">
        insert into foryou.order_detail
        (
            order_id,
            option_id,
            count
        )
        values
        <foreach collection="list" item="item" separator=",">
            (
                (select max(order_id) from foryou.order),
                #{item.option_id},
                #{item.count}
            )
        </foreach>
    </insert>

    <delete id="deleteCoupon" parameterType="_int">
        delete
        from foryou.coupon_list
        where coupon_list_id = #{id}
    </delete>

    <update id="modifyMileage" parameterType="OrderDTO">
        update foryou.customer
            set mileage = mileage - #{mileage}
        where cust_id = #{cust_id}
    </update>

    <select id="orderList" parameterType="String" resultType="OrderDTO">
        select
                od.order_id,
                od.order_detail_id,
                op.product_id,
                op.option_id,
                recipient,
                recipient_phone,
                post,
                addr,
                addr_detail,
                company_name,
                product_name,
                option_name1,
                option_content1,
                option_name2,
                option_content2,
                od.status,
                od.count,
                o.price as 'price',
                op.price as 'option_price',
                img1 as 'img',
                uploadFile,
                order_date
        from foryou.`order` o
                 join foryou.order_detail od on o.order_id = od.order_id
                 join foryou.option op on od.option_id = op.option_id
                 join foryou.product p on op.product_id = p.product_id
                 join foryou.seller s on p.seller_id = s.seller_id
                 left join foryou.refund r on r.order_detail_id = od.order_detail_id
        where cust_id = #{id} and (r.status IS NULL or r.status = 'N')
    </select>

    <insert id="inputRefund" parameterType="RefundDTO">
        insert into foryou.refund
        (
            order_detail_id,
            reason,
            content,
            status
        )
        values
        (
            #{order_detail_id},
            #{reason},
            #{content},
            'N'
        )
    </insert>

    <select id="refundList" parameterType="String" resultType="RefundDTO">
        select
                refund_id,
                r.order_detail_id,
                reason,
                content,
                r.status,
                date_format(date,'%Y-%m-%d %I:%i') date,
                date_format(processing_date,'%Y-%m-%d %I:%i') processing_date,
                p.product_id,
                p.product_name,
                opt.option_name1,
                opt.option_content1,
                opt.option_name2,
                opt.option_content2,
                opt.price,
                od.count,
                p.img1 as 'img',
                p.uploadFile
        from foryou.refund r
             join foryou.order_detail od on (r.order_detail_id = od.order_detail_id)
             join foryou.option opt on (od.option_id = opt.option_id)
             join foryou.order o on (od.order_id = o.order_id)
             join foryou.product p on (opt.product_id = p.product_id)
        where o.cust_id = #{id}
    </select>

    <select id="reviewList" parameterType="String" resultType="reviewDTO">
        select
            review_id,
            cust_id,
            r.product_id,
            product_name,
            content,
            rate,
            img,
            p.img1 as 'product_img',
            uploadFile,
            r.status,
            title,
            date_format(date,'%Y-%m-%d %I:%i') date
        from foryou.review r
            join foryou.product p on r.product_id = p.product_id
        where cust_id = #{id}
    </select>

    <select id="inquiryList" parameterType="String" resultType="inquiryDTO">
        select
            inquiry_id,
            cust_id,
            p.product_id,
            p.product_name,
            title,
            content,
            answer,
            i.status,
            date_format(date, '%Y-%m-%d %I:%i') as 'date',
            date_format(answer_date, '%Y-%m-%d %I:%i') as 'answer_date'
        from foryou.inquiry i
            join foryou.product p on (i.product_id = p.product_id)
        where cust_id = #{id}
    </select>

    <select id="likeCount" parameterType="String" resultType="_int">
        select
            count(*)
        from foryou.`like`
        where cust_id = #{id}
    </select>

    <select id="cartCount" parameterType="String" resultType="_int">
        select
            count(*)
        from foryou.cart
        where cust_id = #{id}
    </select>
</mapper>